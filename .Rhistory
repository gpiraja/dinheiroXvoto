source("http://www.openintro.org/stat/data/present.R")
View(present)
View(present)
install.packages('ggplot2', dep = TRUE)
ls
?gsub
?eeframe
'??eeframe'
‘??eeframe’
## Load the data
dirName <- '/home/germano/Documentos/Cursos/Edx/Machine_Learning_Azure/Dados/DAT203x_LAB03A'
fileName <- "EnergyEfficiencyRegressiondata.csv"
infile <- file.path(dirName, fileName)
eeframe <- read.csv( infile, header = TRUE, stringsAsFactors = FALSE)
## Remove dots from column names.
names(eeframe) <- gsub("\\.", "", names(eeframe))
## Remove columns we are not going to use.
eeframe$CoolingLoad <- NULL
## Convert some columns to factors/categorical.
catList <- c("OverallHeight", "Orientation")
eeframe[, catList] <- lapply(eeframe[, catList],
function(x) as.factor(as.character(x)))
## Scale the numeric features.
scaleList <- c("RelativeCompactness", "SurfaceArea",
"WallArea", "RoofArea", "GlazingArea",
"GlazingAreaDistribution")
eeframe[, scaleList] <- lapply(eeframe[, scaleList], function(x) as.numeric(scale(x)))
## Load the data
dirName <- '/home/germano/Documentos/Cursos/Edx/Machine_Learning_Azure/Dados/DAT203x_LAB03A'
fileName <- "EnergyEfficiencyRegressiondata.csv"
infile <- file.path(dirName, fileName)
eeframe <- read.csv( infile, header = TRUE, stringsAsFactors = FALSE)
## Remove dots from column names.
names(eeframe) <- gsub("\\.", "", names(eeframe))
## Remove columns we are not going to use.
eeframe$CoolingLoad <- NULL
## Convert some columns to factors/categorical.
catList <- c("OverallHeight", "Orientation")
eeframe[, catList] <- lapply(eeframe[, catList],
function(x) as.factor(as.character(x)))
## Scale the numeric features.
scaleList <- c("RelativeCompactness", "SurfaceArea",
"WallArea", "RoofArea", "GlazingArea",
"GlazingAreaDistribution")
eeframe[, scaleList] <- lapply(eeframe[, scaleList], function(x) as.numeric(scale(x)))
View(eeframe)
View(eeframe)
eeframe[, scaleList] <- lapply(eeframe[, scaleList], function(x) as.numeric(scale(x)))
head(eeframe)
## Install ggplot2 (use a personal library if  prompted!)
## install.packages('ggplot2', dep = TRUE)
## Use basic R graphics to create a pair-wise scatter plot
Azure = FALSE
if(Azure){
eeframe <- maml.mapInputPort(1)
maml.mapOutputPort('eeframe')
}
pairs(~ ., data = eeframe)
## Use ggplot2 to create conditioned scatter plots
library(ggplot2)
plotCols <- c("RelativeCompactness",
"SurfaceArea",
"WallArea",
"RoofArea",
"GlazingArea",
"GlazingAreaDistribution")
plotEE <- function(x){
title <- paste("Heating Load vs", x, "\n conditioned on OverallHeight and Orientation")
ggplot(eeframe, aes_string(x, "HeatingLoad")) +
geom_point() +
facet_grid(OverallHeight ~ Orientation) +
ggtitle(title) +
stat_smooth(method = "lm")
}
lapply(plotCols, plotEE)
## Create histograms
plotCols4 <- c("RelativeCompactness",
"SurfaceArea",
"WallArea",
"RoofArea",
"GlazingArea",
"GlazingAreaDistribution",
"HeatingLoad")
library(gridExtra)
eeHist <- function(x) {
title <- paste("Histogram of", x, "conditioned on OverallHeight")
ggplot(eeframe, aes_string(x)) +
geom_histogram(aes(y = ..density..)) +
facet_grid(. ~ OverallHeight) +
ggtitle(title) +
geom_density()
}
lapply(plotCols4, eeHist)
## Create box plots
eebox <- function(x) {
title <- paste("Box plot of", x, "by OverallHeight")
ggplot(eeframe, aes_string('OverallHeight', x)) +
geom_boxplot() +
ggtitle(title)
}
lapply(plotCols4, eebox)
eeframe <- maml.mapInputPort(1)
library(dplyr)
eeframe = mutate(eeframe,
RelativeCompactnessSqred = RelativeCompactness^2,
SurfaceAreaSqred = SurfaceArea^2,
WallAreaSqred = WallArea^2,
RelativeCompactness3 = RelativeCompactness^3,
SurfaceArea3 = SurfaceArea^3,
WallArea3 = WallArea^3)
maml.mapOutputPort('eeframe')
choco <- c(2,4,1.5,2,3)
happy <- c(7,3,8,8,6)
pearson <- data.frame(choco, happy)
View(pearson)
View(pearson)
hist(pearson)
hist(pearson)
hist(pearson$choco, pearson$happy)
summary((pearson))
plot(pearson)
install.packages("~/Downloads/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/SDSFoundations_1.3.tgz", repos = NULL, type = .Platform$pkgType)
library(SDSFoundations)
bike<- BikeData
View(bike)
View(bike)
str(bike)
table(bike$student)
# Import the BikeData dataset, name it "bike"
library(SDSFoundations)
bike<- BikeData
# Find the number of students in the dataset
table(bike$student)
# Pull out student data into a new dataframe
student <-bike[bike$student==1,]
# Find how often the students ride, using the new dataframe
table(student$cyc_freq)
# Create a vector for the distance variable
distance <-student$distance
# Find average distance ridden
mean(distance)
View(bike)
View(bike)
table(student)
table(student$cyc_freq)
mean(distance)
table(student$cyc_freq)
# Import the BikeData dataset, name it "bike"
library(SDSFoundations)
bike<- BikeData
# Find the number of students in the dataset
table(bike$student)
# Pull out student data into a new dataframe
student <-bike[bike$student==1,]
# Find how often the students ride, using the new dataframe
table(student$cyc_freq)
# Create a vector for the distance variable
distance <-student$distance
# Find average distance ridden
mean(distance)
summay(bike$cyc_freq)
summary(bike$cyc_freq)
table(bike$gender[bike$cyc_freq=="Daily",])
bike$gender[bike$cyc_freq=="Daily",]
bike$cyc_freq=="Daily"
bike$gender[bike$cyc_freq=="Daily",]
bike$gender[bike$cyc_freq=="Daily"]
table(bike$gender[bike$cyc_freq=="Daily"])
mean(bike$age[bike$cyc_freq=="Daily"])
table(bike$gender[bike$cyc_freq=="Daily"])
table(bike$age[bike$cyc_freq=="Daily"])
diarios<- bike[bike$cyc_freq=="Daily",]
diarios
mean(diarios$gender=="F")
mean(diarios$age[diarios$gender=="F"])
mean(diarios$age[diarios$gender=="M"])
sum(diarios$age[diarios$gender=="M"])
velhos<-(diarios$age[diarios$gender=="M"]>=30)
sum(velhos)
edx <- c(10,   2,   6,   12,   14,   15,   15,   24,   15,   25,   3,   12)
mean(edx)
sd(edx)
sd(edx)
IQR(edx)
IQR(edx, 0.25)
IQR(edx, 0.75)
edx <- c(10, 2, 6, 12, 14, 15, 15, 24, 15, 25, 3, 12)
quantile(edx, 0.75)
quantile(edx, 0.25)
edx[5]
median(edx)
max(edx)
min(edx)
range(edx)
hist(edx)
order(edx)
quantile(edx, 0.25)
boxplot(edx)
animal <- AnimalData
head(animal)
View(animal)
View(animal)
hist(animal$Days.Shelter)
fivenum(animal$Days.Shelter)
fivenum(animal$Days.Shelter[animal$Outcome.Type=="Adoptio", ])
fivenum(animal$Days.Shelter[animal$Outcome.Type=="Adoption" ])
hist(animal$Days.Shelter[animal$Outcome.Type=="Adoption" ])
mean(animal)
dias<- animal$Days.Shelter[animal$Outcome.Type=="Adoption" ]
mean(dias)
sd(dias)
mean(dias)-211
(mean(dias)-211)/sd(dias)
mean(animal$Days.Shelter)
max(dias)
wich(max(dias))
which(max(dias))
which(max(dias))
whichmax(dias)
which.max(dias)
which.max(animal$Days.Shelter)
animal[425]
animal[425,]
?clusteer
?cluster
??cluster
install.packages("swirl")
install.packages("swirl")
swirl()
library("swirl")
swirl()
swirl()
x<- vector(c(44, NA, 5, NA)
)
x<- vector(c(44, NA, 5, NA))
x<- c(44, NA, 5, NA)
x*3
y<- rnorm(1000)
z <- repp (NA, 1000)
z <- rep (NA, 1000)
my_data <- sample (c(y,z),100)
is.na(my_data)
my_na <-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
?sample
warnings()
sample(1:6, 4 replace = T)
sample(1:6, 4 replace = TRUE)
sample (1:6, 4 replace = TRUE)
sample (1:6, 4, replace = TRUE)
sample (1:6, 4, replace = TRUE)
sample (1:20, 10, replace = F)
sample (1:20, 10)
LETTERS
sample(LETTERS)
flips (sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7)))
flips <- (sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7)))
flips <- (sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, si)
rbinom(1, size = 100, prob = 0.7)
flips2<- rbinom(1, size = 1000, prob = 0.7)
flips2<- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rrnorm(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
View(my_pois)
View(my_pois)
cm <- colMeans(my_pois)
hist(cm)
swirl()
1
swirl()
?install_course
install_course(course_name = "Data_Analisys")
swirl()
swirl()
library("swirl")
swirl()
install_from_swirl("Regression_Models")
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
galton
head(galton)
plot (child, parent)
plot (child ~ parent)
plot (galton, child ~ parent)
plot (child ~ parent, galton)
plot (jitter (child, 4) ~ parent, galton)
regline <- lm (child ~ parent, galton)
regrline <- lm (child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
load("~/Documentos/DadosFoz/dados_R.RData")
rm(dias, animal)
split(agua_sup_alt, agua_sup_alt$Ponto)
dfs_pts<-split(agua_sup_alt, agua_sup_alt$Ponto)
names(dfs_pts)
names(dfs_pts[1])
dfs_pts<-split(agua_sup_alt, agua_sup_alt[2])
names(dfs_pts[1])
length(dfs_pts)
cria_df<- function(df, n_coluna){
dfs_pts<-split(df, df[n_coluna])
for (i in 1:nlength(dfs_pts) {
names(dfs_pts[i]) <- dfs_pts[i]
}
cria_df<- function(df, n_coluna){
dfs_pts<-split(df, df[n_coluna])
for (i in 1:nlength(dfs_pts) {
names(dfs_pts[i]) <- dfs_pts[i]
}
}
cria_df<- function(df, n_coluna)
{
dfs_pts<-split(df, df[n_coluna])
for (i in 1:nlength(dfs_pts) {
names(dfs_pts[i]) <- dfs_pts[i]}
}
cria_df<- function(df, n_coluna)
{
dfs_pts<-split(df, df[n_coluna])
for (i in 1:(nlength(dfs_pts)) {
names(dfs_pts[i]) <- dfs_pts[i]}
}
cria_df<- function(df, n_coluna)
{
dfs_pts<-split(df, df[n_coluna])
for (i in 1:(length(dfs_pts)) {
names(dfs_pts[i]) <- dfs_pts[i]}
}
cria_df<- function(df, n_coluna)
{ dfs_pts<-split(df, df[n_coluna])
for (i in 1:5) {
names(dfs_pts[i]) <- dfs_pts[i]}
}
cria_df(agua_sup, 2)
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
names(dfs_pts[i]) <- dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
names(dfs_pts[i]) <- dfs_pts[[i]]
}
names(dfs_pts)
names(dfs_pts[[1]])
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
names(dfs_pts[i]) <- dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(names(dfs_pts[i])) <- dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(names(dfs_pts[i])) <- dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(paste0(names(dfs_pts[i]))) <- dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(paste0(names(dfs_pts[i]))) , dfs_pts[i]
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(paste0(names(dfs_pts[i])) , dfs_pts[i])
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(names(dfs_pts[i])) , dfs_pts[i])
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(names(dfs_pts[i]) , dfs_pts[i])
}
for (i in 1:33) {
dfs_pts<- split(agua_sup_alt, agua_sup_alt[2])
assign(names(dfs_pts[i]) , as.data.frame(dfs_pts[i]))
}
View(I)
setwd("~/Documentos/Git/dinheiroXvoto")
load("~/Documentos/Git/dinheiroXvoto/dados_prestacao_Contas.RData")
for (i in lista_nome[lista_sc]) {
fpath <- file.path(td, i)
assign(i, read.csv(fpath, sep=";", fileEncoding = "latin1", colClasses = "character"))} # para leitura de todas as colunas como character
loc.url <- "http://agencia.tse.jus.br/estatistica/sead/odsele/prestacao_contas/prestacao_contas_parcial_2016.zip"
td <- tempdir()
tf <- tempfile(tmpdir=td, fileext=".zip")
download.file(loc.url, tf)
#### Relaciona o nome dos arquivos compactados
lista_nome <- unzip(tf, list=TRUE)$Name
#### Seleciona os arquivos relacionados ao Estado de SC
lista_sc <- grep("SC", lista_nome)
#### Descompacta arquivos de interesse
length(lista_sc)
unzip(tf, files=lista_nome[lista_sc], exdir=td, overwrite=TRUE)
for (i in lista_nome[lista_sc]) {
fpath <- file.path(td, i)
assign(i, read.csv(fpath, sep=";", fileEncoding = "latin1", colClasses = "character"))} # para leitura de todas as colunas como character
View(despesas_candidatos_parcial_2016_SC.txt)
View(despesas_candidatos_parcial_2016_SC.txt)
save.image("~/Documentos/Git/dinheiroXvoto/dados_prestacao_Contas.RData")
lista_nome <- unzip(tf, list=TRUE)$Name
unzip(tf, list=TRUE)$Name
despesas_candidatos_parcial_2016_SC.txt <- gsub("[,]",".",despesas_candidatos_parcial_2016_SC.txt$Valor.despesa)
for (i in lista_nome[lista_sc]) {
fpath <- file.path(td, i)
assign(i, read.csv(fpath, sep=";", fileEncoding = "latin1", colClasses = "character"))} # para leitura de todas as colunas como character
despesas_candidatos_parcial_2016_SC.txt$Valor.despesa <- as.numeric(gsub("[,]",".",despesas_candidatos_parcial_2016_SC.txt$Valor.despesa))
View(despesas_candidatos_parcial_2016_SC.txt)
despesas_candidatos_parcial_2016_SC.txt$Valor.despesa <- as.numeric(gsub("[,]",".",despesas_candidatos_parcial_2016_SC.txt$Valor.despesa))
despesas_partidos_parcial_2016_SC.txt$Valor.despesa <- as.numeric(gsub("[,]",".",despesas_partidos_parcial_2016_SC.txt$Valor.despesa))
receitas_candidatos_parcial_2016_SC.txt$Valor.receita <- as.numeric(gsub("[,]",".",receitas_candidatos_parcial_2016_SC.txt$Valor.receita))
receitas_partidos_parcial_2016_SC.txt$Valor.receita <- as.numeric(gsub("[,]",".",receitas_partidos_parcial_2016_SC.txt$Valor.receita))
View(despesas_candidatos_parcial_2016_SC.txt)
View(despesas_candidatos_parcial_2016_SC.txt)
library(dplyr)
summarise(despesas_candidatos_parcial_2016_SC.txt)
View(despesas_candidatos_parcial_2016_SC.txt)
summary(despesas_candidatos_parcial_2016_SC.txt)
str(despesas_partidos_parcial_2016_SC.txt)
despesas_candidatos_parcial_2016_SC.txt <- despesas_candidatos_parcial_2016_SC.txt[,c(4, 8, 9, 10, 13, 15:21)]
View(despesas_candidatos_parcial_2016_SC.txt)
for (i in lista_nome[lista_sc]) {
fpath <- file.path(td, i)
assign(i, read.csv(fpath, sep=";", fileEncoding = "latin1", colClasses = "character"))} # para leitura de todas as colunas como character
#### Transforma campos Valor.receita e Valor Despesa para número
despesas_candidatos_parcial_2016_SC.txt$Valor.despesa <- as.numeric(gsub("[,]",".",despesas_candidatos_parcial_2016_SC.txt$Valor.despesa))
despesas_partidos_parcial_2016_SC.txt$Valor.despesa <- as.numeric(gsub("[,]",".",despesas_partidos_parcial_2016_SC.txt$Valor.despesa))
receitas_candidatos_parcial_2016_SC.txt$Valor.receita <- as.numeric(gsub("[,]",".",receitas_candidatos_parcial_2016_SC.txt$Valor.receita))
receitas_partidos_parcial_2016_SC.txt$Valor.receita <- as.numeric(gsub("[,]",".",receitas_partidos_parcial_2016_SC.txt$Valor.receita))
#### Remove colunas inúteis
str(despesas_candidatos_parcial_2016_SC.txt)
despesas_candidatos <- despesas_candidatos_parcial_2016_SC.txt[,c(4, 8, 9, 10, 11, 12, 13, 17, 19:25)]
View(despesas_candidatos)
str(despesas_partidos_parcial_2016_SC.txt)
despesas_partidos <- despesas_partidos_parcial_2016_SC.txt[,c(4,8, 9, 10, 13, 15, 17:21)]
str(receitas_candidatos_parcial_2016_SC.txt)
View(despesas_partidos)
receitas_candidatos <- receitas_candidatos_parcial_2016_SC.txt[, c(4,8, 9, 10,11, 12, 13, 17, 19, 20:35)]
str(receitas_partidos_parcial_2016_SC.txt)
receita_partidos <- receitas_partidos_parcial_2016_SC.txt[, c(4,8,9,10,13, 15,17:25)]
receitas_partidos <- receitas_partidos_parcial_2016_SC.txt[, c(4,8,9,10,13, 15,17:25)]
rm(receita_partidos)
save.image("~/Documentos/Git/dinheiroXvoto/dados_prestacao_Contas.RData")
load("~/Documentos/Git/dinheiroXvoto/dados_prestacao_Contas.RData")
library(dplyr)
head(select(receitas_partidos, -Nome_doador, -Data ))
head(select(receitas_partidos, -Data.da.receita, Valor.receita))
head(select(receitas_partidos, -Data.da.receita, -Valor.receita))
as.factor(select(receitas_partidos, -Data.da.receita, -Valor.receita))
names(select(receitas_partidos, -Data.da.receita, -Valor.receita))
col_factor <- names(select(receitas_partidos, -Data.da.receita, -Valor.receita))
receitas_partidos[,col_factor ] <- as.factor(receitas_partidos[,col_factor ])
head(receitas_partidos[,col_factor ])
for (i in col_factor) {receitas_partidos[,i ]) <- as.factor(receitas_partidos[,i]}
for (i in col_factor) {receitas_partidos[,i ] <- as.factor(receitas_partidos[,i])}
col_factor <- names(select(receitas_candidatos, -Data.da.receita, -Valor.receita))
col_factor <- names(select(receitas_candidatos, -Data.da.receita, -Valor.receita))
for (i in col_factor) {receitas_candidatos[,i ] <- as.factor(receitas_candidatos[,i])}
col_factor <- names(select(despesas_partidos, -Data.da.despesa, -Valor.despesa))
for (i in col_factor) {despesas_partidos[,i ] <- as.factor(despesas_partidos[,i])}
col_factor <- names(select(despesas_candidatos, -Data.da.despesa, -Valor.despesa))
for (i in col_factor) {despesas_candidatos[,i ] <- as.factor(despesas_candidatos[,i])}
rec_vereador_florianopolis <- filter (receitas_candidatos, Municipio == "FLORIANÓPOLIS" & Cargo == "Vereador")
rec_vereador_florianopolis <- filter (receitas_candidatos, Nome.da.UE == "FLORIANÓPOLIS" & Cargo == "Vereador")
View(rec_vereador_florianopolis)
rec_vereador_florianopolis <- filter (receitas_candidatos[,c(2,3,6,9,16) ], Nome.da.UE == "FLORIANÓPOLIS" & Cargo == "Vereador")
rec_vereador_florianopolis <- filter (receitas_candidatos[,c(2,3,5,6,9,16) ], Nome.da.UE == "FLORIANÓPOLIS" & Cargo == "Vereador")
View(rec_vereador_florianopolis)
arrange(summarise(group_by(rec_vereador_florianopolis, Nome_candidato), valor= sum(Valor_receita)), desc(valor))
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato), valor= sum(Valor.da.receita)), desc(valor))
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato), valor= sum(Valor.receita)), desc(valor))
rec_prefeito_florianopolis <- filter (receitas_candidatos[,c(2,3,5,6,9,16) ], Nome.da.UE == "FLORIANÓPOLIS" & Cargo == "Prefeito")
arrange(summarise(group_by(rec_prefeito_florianopolis, Nome.candidato), valor= sum(Valor.receita)), desc(valor))
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato), valor= sum(Valor.receita)), desc(valor))[1:10]
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato), valor= sum(Valor.receita)), desc(valor))[1:10,]
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato), valor= sum(Valor.receita)), desc(valor))[1:20,]
arrange(summarise(group_by(rec_vereador_florianopolis, Nome.candidato, Sigla..Partido), valor= sum(Valor.receita)), desc(valor))[1:20,]
arrange(summarise(group_by(rec_pref_florianopolis,  Nome.do.doador), valor= sum(Valor.receita))), desc(valor))
arrange(summarise(group_by(rec_pref_florianopolis,  Nome.do.doador), valor= sum(Valor.receita)), desc(valor))
arrange(summarise(group_by(rec_preffeito_florianopolis,  Nome.do.doador), valor= sum(Valor.receita)), desc(valor))
arrange(summarise(group_by(rec_prefeito_florianopolis,  Nome.do.doador), valor= sum(Valor.receita)), desc(valor))
str(rec_prefeito_florianopolis)
arrange(summarise(group_by(rec_prefeito_florianopolis,  Nome.do.doador..Receita.Federal.), valor= sum(Valor.receita)), desc(valor))
arrange(summarise(group_by(rec_vereador_florianopolis,  Nome.do.doador..Receita.Federal.), valor= sum(Valor.receita)), desc(valor))
arrange(summarise(group_by(rec_vereador_florianopolis,  Nome.do.doador..Receita.Federal.), valor= sum(Valor.receita)), desc(valor))[1:20,]
save.image("~/Documentos/Git/dinheiroXvoto/dados_prestacao_Contas.RData")
